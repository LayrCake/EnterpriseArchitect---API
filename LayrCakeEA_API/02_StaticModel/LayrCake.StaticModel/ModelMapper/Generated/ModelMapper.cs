/*------------------------------------------------------------------------------
<auto-generated>
     This code was generated by a tool.
	    Code originates from EA Uml ClassTemplate.t4
     Changes to this file will be lost if the code is regenerated.
	    Code Generated Date: 	08 June 2018
	    ProjectModel: 			LayrCake
	    Requested Namespace:	Model$2. Hosting Model$LayrCake.StaticModel$LayrCake$StaticModel$ViewModelObjects$Implementation
</auto-generated>
------------------------------------------------------------------------------*/
using Infrastructure.Helpers;
using MapTool = AutoMapper;
using LayrCake.StaticModel.Criteria.Implementation;
using LayrCake.StaticModel.ViewModelObjects.Implementation;
using LayrCake.StaticModel.DataVisualiserServiceReference;

#pragma warning disable CS0618
namespace LayrCake.StaticModel.ModelMapper
{
	// ReSharper disable InconsistentNaming
	#region Maps

	public partial class MapperLoader
	{
		internal bool Mapper_Loader() { 
			bool returnValue = false;
			CreateMap_AspGoogleUser();
			CreateMap_AspNetRole();
			CreateMap_AspNetUser();
			CreateMap_AspNetUserClaim();
			CreateMap_AspNetUserLogin();
			CreateMap_AspNetUserRole();
			CreateMap_Company();
			CreateMap_Config();
			CreateMap_DDDAttribute();
			CreateMap_DDDConnector();
			CreateMap_DDDElement();
			CreateMap_DDDLayer();
			CreateMap_DDDLayerTemplate();
			CreateMap_DDDMethod();
			CreateMap_DDDPackage();
			CreateMap_DDDProblemDomain();
			CreateMap_DDDProject();
			CreateMap_DDDProperty();
			CreateMap_DDDSolution();
			CreateMap_FileUpload();
			CreateMap_PasswordHistory();
			CreateMap_TrafficDetail();
			CreateMap_User();
			CreateMap_UserAccess();
			CreateMap_UserProfile();
			CreateMap_UserRegistration();
			CreateMap_UserSession();
			CreateMap_UserSessionHistory();

			returnValue = true;
			return returnValue;
		}

			#region Convert IMethods

		internal virtual void CreateMap_AspGoogleUser() { 
			MapTool.Mapper.CreateMap<AspGoogleUser, AspGoogleUserVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspGoogleUserVwm, AspGoogleUser>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspGoogleUserCriteria, AspGoogleUserVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspGoogleUserVwmCriteria, AspGoogleUserCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_AspNetRole() { 
			MapTool.Mapper.CreateMap<AspNetRole, AspNetRoleVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetRoleVwm, AspNetRole>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetRoleCriteria, AspNetRoleVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetRoleVwmCriteria, AspNetRoleCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_AspNetUser() { 
			MapTool.Mapper.CreateMap<AspNetUser, AspNetUserVwm>()
				.AfterMap((s, c) => { if (c != null && c.AspGoogleUsers != null) foreach (var l in c.AspGoogleUsers) { l.AspNetUser = c; } })
				.AfterMap((s, c) => { if (c != null && c.AspNetUserClaims != null) foreach (var l in c.AspNetUserClaims) { l.AspNetUser = c; } })
				.AfterMap((s, c) => { if (c != null && c.AspNetUserLogins != null) foreach (var l in c.AspNetUserLogins) { l.AspNetUser = c; } })
				.AfterMap((s, c) => { if (c != null && c.AspNetUserRoles != null) foreach (var l in c.AspNetUserRoles) { l.AspNetUser = c; } })
				.AfterMap((s, c) => { if (c != null && c.UserProfiles != null) foreach (var l in c.UserProfiles) { l.AspNetUser = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserVwm, AspNetUser>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserCriteria, AspNetUserVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserVwmCriteria, AspNetUserCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_AspNetUserClaim() { 
			MapTool.Mapper.CreateMap<AspNetUserClaim, AspNetUserClaimVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserClaimVwm, AspNetUserClaim>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserClaimCriteria, AspNetUserClaimVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserClaimVwmCriteria, AspNetUserClaimCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_AspNetUserLogin() { 
			MapTool.Mapper.CreateMap<AspNetUserLogin, AspNetUserLoginVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserLoginVwm, AspNetUserLogin>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserLoginCriteria, AspNetUserLoginVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserLoginVwmCriteria, AspNetUserLoginCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_AspNetUserRole() { 
			MapTool.Mapper.CreateMap<AspNetUserRole, AspNetUserRoleVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserRoleVwm, AspNetUserRole>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserRoleCriteria, AspNetUserRoleVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<AspNetUserRoleVwmCriteria, AspNetUserRoleCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_Company() { 
			MapTool.Mapper.CreateMap<Company, CompanyVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<CompanyVwm, Company>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<CompanyCriteria, CompanyVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<CompanyVwmCriteria, CompanyCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_Config() { 
			MapTool.Mapper.CreateMap<Config, ConfigVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<ConfigVwm, Config>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<ConfigCriteria, ConfigVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<ConfigVwmCriteria, ConfigCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDAttribute() { 
			MapTool.Mapper.CreateMap<DDDAttribute, DDDAttributeVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDAttributeVwm, DDDAttribute>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDAttributeCriteria, DDDAttributeVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDAttributeVwmCriteria, DDDAttributeCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDConnector() { 
			MapTool.Mapper.CreateMap<DDDConnector, DDDConnectorVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDConnectorVwm, DDDConnector>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDConnectorCriteria, DDDConnectorVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDConnectorVwmCriteria, DDDConnectorCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDElement() { 
			MapTool.Mapper.CreateMap<DDDElement, DDDElementVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDMethods != null) foreach (var l in c.DDDMethods) { l.DDDElement = c; } })
				.AfterMap((s, c) => { if (c != null && c.DDDProperties != null) foreach (var l in c.DDDProperties) { l.DDDElement = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDElementVwm, DDDElement>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDElementCriteria, DDDElementVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDElementVwmCriteria, DDDElementCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDLayer() { 
			MapTool.Mapper.CreateMap<DDDLayer, DDDLayerVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDPackages != null) foreach (var l in c.DDDPackages) { l.DDDLayer = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerVwm, DDDLayer>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerCriteria, DDDLayerVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerVwmCriteria, DDDLayerCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDLayerTemplate() { 
			MapTool.Mapper.CreateMap<DDDLayerTemplate, DDDLayerTemplateVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerTemplateVwm, DDDLayerTemplate>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerTemplateCriteria, DDDLayerTemplateVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDLayerTemplateVwmCriteria, DDDLayerTemplateCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDMethod() { 
			MapTool.Mapper.CreateMap<DDDMethod, DDDMethodVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDAttributes != null) foreach (var l in c.DDDAttributes) { l.DDDMethod = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDMethodVwm, DDDMethod>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDMethodCriteria, DDDMethodVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDMethodVwmCriteria, DDDMethodCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDPackage() { 
			MapTool.Mapper.CreateMap<DDDPackage, DDDPackageVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDElements != null) foreach (var l in c.DDDElements) { l.DDDPackage = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPackageVwm, DDDPackage>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPackageCriteria, DDDPackageVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPackageVwmCriteria, DDDPackageCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDProblemDomain() { 
			MapTool.Mapper.CreateMap<DDDProblemDomain, DDDProblemDomainVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDPackages != null) foreach (var l in c.DDDPackages) { l.DDDProblemDomain = c; } })
				.AfterMap((s, c) => { if (c != null && c.DDDSolutions != null) foreach (var l in c.DDDSolutions) { l.DDDProblemDomain = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProblemDomainVwm, DDDProblemDomain>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProblemDomainCriteria, DDDProblemDomainVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProblemDomainVwmCriteria, DDDProblemDomainCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDProject() { 
			MapTool.Mapper.CreateMap<DDDProject, DDDProjectVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProjectVwm, DDDProject>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProjectCriteria, DDDProjectVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDProjectVwmCriteria, DDDProjectCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDProperty() { 
			MapTool.Mapper.CreateMap<DDDProperty, DDDPropertyVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPropertyVwm, DDDProperty>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPropertyCriteria, DDDPropertyVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDPropertyVwmCriteria, DDDPropertyCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_DDDSolution() { 
			MapTool.Mapper.CreateMap<DDDSolution, DDDSolutionVwm>()
				.AfterMap((s, c) => { if (c != null && c.DDDLayers != null) foreach (var l in c.DDDLayers) { l.DDDSolution = c; } })
				.AfterMap((s, c) => { if (c != null && c.DDDPackages != null) foreach (var l in c.DDDPackages) { l.DDDSolution = c; } })
				.AfterMap((s, c) => { if (c != null && c.DDDProjects != null) foreach (var l in c.DDDProjects) { l.DDDSolution = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDSolutionVwm, DDDSolution>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDSolutionCriteria, DDDSolutionVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<DDDSolutionVwmCriteria, DDDSolutionCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_FileUpload() { 
			MapTool.Mapper.CreateMap<FileUpload, FileUploadVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<FileUploadVwm, FileUpload>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<FileUploadCriteria, FileUploadVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<FileUploadVwmCriteria, FileUploadCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_PasswordHistory() { 
			MapTool.Mapper.CreateMap<PasswordHistory, PasswordHistoryVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<PasswordHistoryVwm, PasswordHistory>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<PasswordHistoryCriteria, PasswordHistoryVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<PasswordHistoryVwmCriteria, PasswordHistoryCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_TrafficDetail() { 
			MapTool.Mapper.CreateMap<TrafficDetail, TrafficDetailVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<TrafficDetailVwm, TrafficDetail>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<TrafficDetailCriteria, TrafficDetailVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<TrafficDetailVwmCriteria, TrafficDetailCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_User() { 
			MapTool.Mapper.CreateMap<User, UserVwm>()
				.AfterMap((s, c) => { if (c != null && c.AspNetUsers != null) foreach (var l in c.AspNetUsers) { l.User = c; } })
				.AfterMap((s, c) => { if (c != null && c.PasswordHistories != null) foreach (var l in c.PasswordHistories) { l.User = c; } })
				.AfterMap((s, c) => { if (c != null && c.UserProfiles != null) foreach (var l in c.UserProfiles) { l.User = c; } })
				.AfterMap((s, c) => { if (c != null && c.UserSessions != null) foreach (var l in c.UserSessions) { l.User = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserVwm, User>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserCriteria, UserVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserVwmCriteria, UserCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_UserAccess() { 
			MapTool.Mapper.CreateMap<UserAccess, UserAccessVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserAccessVwm, UserAccess>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserAccessCriteria, UserAccessVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserAccessVwmCriteria, UserAccessCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_UserProfile() { 
			MapTool.Mapper.CreateMap<UserProfile, UserProfileVwm>()
				.AfterMap((s, c) => { if (c != null && c.FileUploads != null) foreach (var l in c.FileUploads) { l.UserProfile = c; } })
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserProfileVwm, UserProfile>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserProfileCriteria, UserProfileVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserProfileVwmCriteria, UserProfileCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_UserRegistration() { 
			MapTool.Mapper.CreateMap<UserRegistration, UserRegistrationVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserRegistrationVwm, UserRegistration>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserRegistrationCriteria, UserRegistrationVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserRegistrationVwmCriteria, UserRegistrationCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_UserSession() { 
			MapTool.Mapper.CreateMap<UserSession, UserSessionVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionVwm, UserSession>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionCriteria, UserSessionVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionVwmCriteria, UserSessionCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}
		internal virtual void CreateMap_UserSessionHistory() { 
			MapTool.Mapper.CreateMap<UserSessionHistory, UserSessionHistoryVwm>()
				.IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionHistoryVwm, UserSessionHistory>().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionHistoryCriteria, UserSessionHistoryVwmCriteria>().FixSourceCriteria().IgnoreAllNonExisting();
			MapTool.Mapper.CreateMap<UserSessionHistoryVwmCriteria, UserSessionHistoryCriteria>().FixCriteria().IgnoreAllNonExisting();
	
			}


			#endregion Convert IMethods
	}

	#endregion Maps


	public partial class Mapper
	{
		internal static bool Mapper_Load() { return new MapperOverride().Mapper_Loader(); }

		#region ToBusiness FromBusiness Map

			#region AspGoogleUser
	
				internal static AspGoogleUserVwmCriteria ToViewModelCriteria(AspGoogleUserCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspGoogleUserCriteria, AspGoogleUserVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspGoogleUserCriteria FromViewModelCriteria(AspGoogleUserVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspGoogleUserVwmCriteria, AspGoogleUserCriteria>(businessCriteria);
				}
	
				internal static AspGoogleUserVwm ToViewModelObject(AspGoogleUser dataTransferObject)
				{
					return MapTool.Mapper.Map<AspGoogleUser, AspGoogleUserVwm>(dataTransferObject);
				}
	
				internal static AspGoogleUser FromViewModelObject(AspGoogleUserVwm businessObject)
				{
					return MapTool.Mapper.Map<AspGoogleUserVwm, AspGoogleUser>(businessObject);
			}
	
			#endregion AspGoogleUser
			#region AspNetRole
	
				internal static AspNetRoleVwmCriteria ToViewModelCriteria(AspNetRoleCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspNetRoleCriteria, AspNetRoleVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspNetRoleCriteria FromViewModelCriteria(AspNetRoleVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspNetRoleVwmCriteria, AspNetRoleCriteria>(businessCriteria);
				}
	
				internal static AspNetRoleVwm ToViewModelObject(AspNetRole dataTransferObject)
				{
					return MapTool.Mapper.Map<AspNetRole, AspNetRoleVwm>(dataTransferObject);
				}
	
				internal static AspNetRole FromViewModelObject(AspNetRoleVwm businessObject)
				{
					return MapTool.Mapper.Map<AspNetRoleVwm, AspNetRole>(businessObject);
			}
	
			#endregion AspNetRole
			#region AspNetUser
	
				internal static AspNetUserVwmCriteria ToViewModelCriteria(AspNetUserCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserCriteria, AspNetUserVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspNetUserCriteria FromViewModelCriteria(AspNetUserVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserVwmCriteria, AspNetUserCriteria>(businessCriteria);
				}
	
				internal static AspNetUserVwm ToViewModelObject(AspNetUser dataTransferObject)
				{
					return MapTool.Mapper.Map<AspNetUser, AspNetUserVwm>(dataTransferObject);
				}
	
				internal static AspNetUser FromViewModelObject(AspNetUserVwm businessObject)
				{
					return MapTool.Mapper.Map<AspNetUserVwm, AspNetUser>(businessObject);
			}
	
			#endregion AspNetUser
			#region AspNetUserClaim
	
				internal static AspNetUserClaimVwmCriteria ToViewModelCriteria(AspNetUserClaimCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserClaimCriteria, AspNetUserClaimVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspNetUserClaimCriteria FromViewModelCriteria(AspNetUserClaimVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserClaimVwmCriteria, AspNetUserClaimCriteria>(businessCriteria);
				}
	
				internal static AspNetUserClaimVwm ToViewModelObject(AspNetUserClaim dataTransferObject)
				{
					return MapTool.Mapper.Map<AspNetUserClaim, AspNetUserClaimVwm>(dataTransferObject);
				}
	
				internal static AspNetUserClaim FromViewModelObject(AspNetUserClaimVwm businessObject)
				{
					return MapTool.Mapper.Map<AspNetUserClaimVwm, AspNetUserClaim>(businessObject);
			}
	
			#endregion AspNetUserClaim
			#region AspNetUserLogin
	
				internal static AspNetUserLoginVwmCriteria ToViewModelCriteria(AspNetUserLoginCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserLoginCriteria, AspNetUserLoginVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspNetUserLoginCriteria FromViewModelCriteria(AspNetUserLoginVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserLoginVwmCriteria, AspNetUserLoginCriteria>(businessCriteria);
				}
	
				internal static AspNetUserLoginVwm ToViewModelObject(AspNetUserLogin dataTransferObject)
				{
					return MapTool.Mapper.Map<AspNetUserLogin, AspNetUserLoginVwm>(dataTransferObject);
				}
	
				internal static AspNetUserLogin FromViewModelObject(AspNetUserLoginVwm businessObject)
				{
					return MapTool.Mapper.Map<AspNetUserLoginVwm, AspNetUserLogin>(businessObject);
			}
	
			#endregion AspNetUserLogin
			#region AspNetUserRole
	
				internal static AspNetUserRoleVwmCriteria ToViewModelCriteria(AspNetUserRoleCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserRoleCriteria, AspNetUserRoleVwmCriteria>(dataTransferCriteria);
				}
	
				internal static AspNetUserRoleCriteria FromViewModelCriteria(AspNetUserRoleVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<AspNetUserRoleVwmCriteria, AspNetUserRoleCriteria>(businessCriteria);
				}
	
				internal static AspNetUserRoleVwm ToViewModelObject(AspNetUserRole dataTransferObject)
				{
					return MapTool.Mapper.Map<AspNetUserRole, AspNetUserRoleVwm>(dataTransferObject);
				}
	
				internal static AspNetUserRole FromViewModelObject(AspNetUserRoleVwm businessObject)
				{
					return MapTool.Mapper.Map<AspNetUserRoleVwm, AspNetUserRole>(businessObject);
			}
	
			#endregion AspNetUserRole
			#region Company
	
				internal static CompanyVwmCriteria ToViewModelCriteria(CompanyCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<CompanyCriteria, CompanyVwmCriteria>(dataTransferCriteria);
				}
	
				internal static CompanyCriteria FromViewModelCriteria(CompanyVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<CompanyVwmCriteria, CompanyCriteria>(businessCriteria);
				}
	
				internal static CompanyVwm ToViewModelObject(Company dataTransferObject)
				{
					return MapTool.Mapper.Map<Company, CompanyVwm>(dataTransferObject);
				}
	
				internal static Company FromViewModelObject(CompanyVwm businessObject)
				{
					return MapTool.Mapper.Map<CompanyVwm, Company>(businessObject);
			}
	
			#endregion Company
			#region Config
	
				internal static ConfigVwmCriteria ToViewModelCriteria(ConfigCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<ConfigCriteria, ConfigVwmCriteria>(dataTransferCriteria);
				}
	
				internal static ConfigCriteria FromViewModelCriteria(ConfigVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<ConfigVwmCriteria, ConfigCriteria>(businessCriteria);
				}
	
				internal static ConfigVwm ToViewModelObject(Config dataTransferObject)
				{
					return MapTool.Mapper.Map<Config, ConfigVwm>(dataTransferObject);
				}
	
				internal static Config FromViewModelObject(ConfigVwm businessObject)
				{
					return MapTool.Mapper.Map<ConfigVwm, Config>(businessObject);
			}
	
			#endregion Config
			#region DDDAttribute
	
				internal static DDDAttributeVwmCriteria ToViewModelCriteria(DDDAttributeCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDAttributeCriteria, DDDAttributeVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDAttributeCriteria FromViewModelCriteria(DDDAttributeVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDAttributeVwmCriteria, DDDAttributeCriteria>(businessCriteria);
				}
	
				internal static DDDAttributeVwm ToViewModelObject(DDDAttribute dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDAttribute, DDDAttributeVwm>(dataTransferObject);
				}
	
				internal static DDDAttribute FromViewModelObject(DDDAttributeVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDAttributeVwm, DDDAttribute>(businessObject);
			}
	
			#endregion DDDAttribute
			#region DDDConnector
	
				internal static DDDConnectorVwmCriteria ToViewModelCriteria(DDDConnectorCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDConnectorCriteria, DDDConnectorVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDConnectorCriteria FromViewModelCriteria(DDDConnectorVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDConnectorVwmCriteria, DDDConnectorCriteria>(businessCriteria);
				}
	
				internal static DDDConnectorVwm ToViewModelObject(DDDConnector dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDConnector, DDDConnectorVwm>(dataTransferObject);
				}
	
				internal static DDDConnector FromViewModelObject(DDDConnectorVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDConnectorVwm, DDDConnector>(businessObject);
			}
	
			#endregion DDDConnector
			#region DDDElement
	
				internal static DDDElementVwmCriteria ToViewModelCriteria(DDDElementCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDElementCriteria, DDDElementVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDElementCriteria FromViewModelCriteria(DDDElementVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDElementVwmCriteria, DDDElementCriteria>(businessCriteria);
				}
	
				internal static DDDElementVwm ToViewModelObject(DDDElement dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDElement, DDDElementVwm>(dataTransferObject);
				}
	
				internal static DDDElement FromViewModelObject(DDDElementVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDElementVwm, DDDElement>(businessObject);
			}
	
			#endregion DDDElement
			#region DDDLayer
	
				internal static DDDLayerVwmCriteria ToViewModelCriteria(DDDLayerCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDLayerCriteria, DDDLayerVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDLayerCriteria FromViewModelCriteria(DDDLayerVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDLayerVwmCriteria, DDDLayerCriteria>(businessCriteria);
				}
	
				internal static DDDLayerVwm ToViewModelObject(DDDLayer dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDLayer, DDDLayerVwm>(dataTransferObject);
				}
	
				internal static DDDLayer FromViewModelObject(DDDLayerVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDLayerVwm, DDDLayer>(businessObject);
			}
	
			#endregion DDDLayer
			#region DDDLayerTemplate
	
				internal static DDDLayerTemplateVwmCriteria ToViewModelCriteria(DDDLayerTemplateCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDLayerTemplateCriteria, DDDLayerTemplateVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDLayerTemplateCriteria FromViewModelCriteria(DDDLayerTemplateVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDLayerTemplateVwmCriteria, DDDLayerTemplateCriteria>(businessCriteria);
				}
	
				internal static DDDLayerTemplateVwm ToViewModelObject(DDDLayerTemplate dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDLayerTemplate, DDDLayerTemplateVwm>(dataTransferObject);
				}
	
				internal static DDDLayerTemplate FromViewModelObject(DDDLayerTemplateVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDLayerTemplateVwm, DDDLayerTemplate>(businessObject);
			}
	
			#endregion DDDLayerTemplate
			#region DDDMethod
	
				internal static DDDMethodVwmCriteria ToViewModelCriteria(DDDMethodCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDMethodCriteria, DDDMethodVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDMethodCriteria FromViewModelCriteria(DDDMethodVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDMethodVwmCriteria, DDDMethodCriteria>(businessCriteria);
				}
	
				internal static DDDMethodVwm ToViewModelObject(DDDMethod dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDMethod, DDDMethodVwm>(dataTransferObject);
				}
	
				internal static DDDMethod FromViewModelObject(DDDMethodVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDMethodVwm, DDDMethod>(businessObject);
			}
	
			#endregion DDDMethod
			#region DDDPackage
	
				internal static DDDPackageVwmCriteria ToViewModelCriteria(DDDPackageCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDPackageCriteria, DDDPackageVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDPackageCriteria FromViewModelCriteria(DDDPackageVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDPackageVwmCriteria, DDDPackageCriteria>(businessCriteria);
				}
	
				internal static DDDPackageVwm ToViewModelObject(DDDPackage dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDPackage, DDDPackageVwm>(dataTransferObject);
				}
	
				internal static DDDPackage FromViewModelObject(DDDPackageVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDPackageVwm, DDDPackage>(businessObject);
			}
	
			#endregion DDDPackage
			#region DDDProblemDomain
	
				internal static DDDProblemDomainVwmCriteria ToViewModelCriteria(DDDProblemDomainCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDProblemDomainCriteria, DDDProblemDomainVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDProblemDomainCriteria FromViewModelCriteria(DDDProblemDomainVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDProblemDomainVwmCriteria, DDDProblemDomainCriteria>(businessCriteria);
				}
	
				internal static DDDProblemDomainVwm ToViewModelObject(DDDProblemDomain dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDProblemDomain, DDDProblemDomainVwm>(dataTransferObject);
				}
	
				internal static DDDProblemDomain FromViewModelObject(DDDProblemDomainVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDProblemDomainVwm, DDDProblemDomain>(businessObject);
			}
	
			#endregion DDDProblemDomain
			#region DDDProject
	
				internal static DDDProjectVwmCriteria ToViewModelCriteria(DDDProjectCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDProjectCriteria, DDDProjectVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDProjectCriteria FromViewModelCriteria(DDDProjectVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDProjectVwmCriteria, DDDProjectCriteria>(businessCriteria);
				}
	
				internal static DDDProjectVwm ToViewModelObject(DDDProject dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDProject, DDDProjectVwm>(dataTransferObject);
				}
	
				internal static DDDProject FromViewModelObject(DDDProjectVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDProjectVwm, DDDProject>(businessObject);
			}
	
			#endregion DDDProject
			#region DDDProperty
	
				internal static DDDPropertyVwmCriteria ToViewModelCriteria(DDDPropertyCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDPropertyCriteria, DDDPropertyVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDPropertyCriteria FromViewModelCriteria(DDDPropertyVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDPropertyVwmCriteria, DDDPropertyCriteria>(businessCriteria);
				}
	
				internal static DDDPropertyVwm ToViewModelObject(DDDProperty dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDProperty, DDDPropertyVwm>(dataTransferObject);
				}
	
				internal static DDDProperty FromViewModelObject(DDDPropertyVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDPropertyVwm, DDDProperty>(businessObject);
			}
	
			#endregion DDDProperty
			#region DDDSolution
	
				internal static DDDSolutionVwmCriteria ToViewModelCriteria(DDDSolutionCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<DDDSolutionCriteria, DDDSolutionVwmCriteria>(dataTransferCriteria);
				}
	
				internal static DDDSolutionCriteria FromViewModelCriteria(DDDSolutionVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<DDDSolutionVwmCriteria, DDDSolutionCriteria>(businessCriteria);
				}
	
				internal static DDDSolutionVwm ToViewModelObject(DDDSolution dataTransferObject)
				{
					return MapTool.Mapper.Map<DDDSolution, DDDSolutionVwm>(dataTransferObject);
				}
	
				internal static DDDSolution FromViewModelObject(DDDSolutionVwm businessObject)
				{
					return MapTool.Mapper.Map<DDDSolutionVwm, DDDSolution>(businessObject);
			}
	
			#endregion DDDSolution
			#region FileUpload
	
				internal static FileUploadVwmCriteria ToViewModelCriteria(FileUploadCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<FileUploadCriteria, FileUploadVwmCriteria>(dataTransferCriteria);
				}
	
				internal static FileUploadCriteria FromViewModelCriteria(FileUploadVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<FileUploadVwmCriteria, FileUploadCriteria>(businessCriteria);
				}
	
				internal static FileUploadVwm ToViewModelObject(FileUpload dataTransferObject)
				{
					return MapTool.Mapper.Map<FileUpload, FileUploadVwm>(dataTransferObject);
				}
	
				internal static FileUpload FromViewModelObject(FileUploadVwm businessObject)
				{
					return MapTool.Mapper.Map<FileUploadVwm, FileUpload>(businessObject);
			}
	
			#endregion FileUpload
			#region PasswordHistory
	
				internal static PasswordHistoryVwmCriteria ToViewModelCriteria(PasswordHistoryCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<PasswordHistoryCriteria, PasswordHistoryVwmCriteria>(dataTransferCriteria);
				}
	
				internal static PasswordHistoryCriteria FromViewModelCriteria(PasswordHistoryVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<PasswordHistoryVwmCriteria, PasswordHistoryCriteria>(businessCriteria);
				}
	
				internal static PasswordHistoryVwm ToViewModelObject(PasswordHistory dataTransferObject)
				{
					return MapTool.Mapper.Map<PasswordHistory, PasswordHistoryVwm>(dataTransferObject);
				}
	
				internal static PasswordHistory FromViewModelObject(PasswordHistoryVwm businessObject)
				{
					return MapTool.Mapper.Map<PasswordHistoryVwm, PasswordHistory>(businessObject);
			}
	
			#endregion PasswordHistory
			#region TrafficDetail
	
				internal static TrafficDetailVwmCriteria ToViewModelCriteria(TrafficDetailCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<TrafficDetailCriteria, TrafficDetailVwmCriteria>(dataTransferCriteria);
				}
	
				internal static TrafficDetailCriteria FromViewModelCriteria(TrafficDetailVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<TrafficDetailVwmCriteria, TrafficDetailCriteria>(businessCriteria);
				}
	
				internal static TrafficDetailVwm ToViewModelObject(TrafficDetail dataTransferObject)
				{
					return MapTool.Mapper.Map<TrafficDetail, TrafficDetailVwm>(dataTransferObject);
				}
	
				internal static TrafficDetail FromViewModelObject(TrafficDetailVwm businessObject)
				{
					return MapTool.Mapper.Map<TrafficDetailVwm, TrafficDetail>(businessObject);
			}
	
			#endregion TrafficDetail
			#region User
	
				internal static UserVwmCriteria ToViewModelCriteria(UserCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserCriteria, UserVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserCriteria FromViewModelCriteria(UserVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserVwmCriteria, UserCriteria>(businessCriteria);
				}
	
				internal static UserVwm ToViewModelObject(User dataTransferObject)
				{
					return MapTool.Mapper.Map<User, UserVwm>(dataTransferObject);
				}
	
				internal static User FromViewModelObject(UserVwm businessObject)
				{
					return MapTool.Mapper.Map<UserVwm, User>(businessObject);
			}
	
			#endregion User
			#region UserAccess
	
				internal static UserAccessVwmCriteria ToViewModelCriteria(UserAccessCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserAccessCriteria, UserAccessVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserAccessCriteria FromViewModelCriteria(UserAccessVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserAccessVwmCriteria, UserAccessCriteria>(businessCriteria);
				}
	
				internal static UserAccessVwm ToViewModelObject(UserAccess dataTransferObject)
				{
					return MapTool.Mapper.Map<UserAccess, UserAccessVwm>(dataTransferObject);
				}
	
				internal static UserAccess FromViewModelObject(UserAccessVwm businessObject)
				{
					return MapTool.Mapper.Map<UserAccessVwm, UserAccess>(businessObject);
			}
	
			#endregion UserAccess
			#region UserProfile
	
				internal static UserProfileVwmCriteria ToViewModelCriteria(UserProfileCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserProfileCriteria, UserProfileVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserProfileCriteria FromViewModelCriteria(UserProfileVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserProfileVwmCriteria, UserProfileCriteria>(businessCriteria);
				}
	
				internal static UserProfileVwm ToViewModelObject(UserProfile dataTransferObject)
				{
					return MapTool.Mapper.Map<UserProfile, UserProfileVwm>(dataTransferObject);
				}
	
				internal static UserProfile FromViewModelObject(UserProfileVwm businessObject)
				{
					return MapTool.Mapper.Map<UserProfileVwm, UserProfile>(businessObject);
			}
	
			#endregion UserProfile
			#region UserRegistration
	
				internal static UserRegistrationVwmCriteria ToViewModelCriteria(UserRegistrationCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserRegistrationCriteria, UserRegistrationVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserRegistrationCriteria FromViewModelCriteria(UserRegistrationVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserRegistrationVwmCriteria, UserRegistrationCriteria>(businessCriteria);
				}
	
				internal static UserRegistrationVwm ToViewModelObject(UserRegistration dataTransferObject)
				{
					return MapTool.Mapper.Map<UserRegistration, UserRegistrationVwm>(dataTransferObject);
				}
	
				internal static UserRegistration FromViewModelObject(UserRegistrationVwm businessObject)
				{
					return MapTool.Mapper.Map<UserRegistrationVwm, UserRegistration>(businessObject);
			}
	
			#endregion UserRegistration
			#region UserSession
	
				internal static UserSessionVwmCriteria ToViewModelCriteria(UserSessionCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserSessionCriteria, UserSessionVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserSessionCriteria FromViewModelCriteria(UserSessionVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserSessionVwmCriteria, UserSessionCriteria>(businessCriteria);
				}
	
				internal static UserSessionVwm ToViewModelObject(UserSession dataTransferObject)
				{
					return MapTool.Mapper.Map<UserSession, UserSessionVwm>(dataTransferObject);
				}
	
				internal static UserSession FromViewModelObject(UserSessionVwm businessObject)
				{
					return MapTool.Mapper.Map<UserSessionVwm, UserSession>(businessObject);
			}
	
			#endregion UserSession
			#region UserSessionHistory
	
				internal static UserSessionHistoryVwmCriteria ToViewModelCriteria(UserSessionHistoryCriteria dataTransferCriteria)
				{
					return MapTool.Mapper.Map<UserSessionHistoryCriteria, UserSessionHistoryVwmCriteria>(dataTransferCriteria);
				}
	
				internal static UserSessionHistoryCriteria FromViewModelCriteria(UserSessionHistoryVwmCriteria businessCriteria)
				{
					return MapTool.Mapper.Map<UserSessionHistoryVwmCriteria, UserSessionHistoryCriteria>(businessCriteria);
				}
	
				internal static UserSessionHistoryVwm ToViewModelObject(UserSessionHistory dataTransferObject)
				{
					return MapTool.Mapper.Map<UserSessionHistory, UserSessionHistoryVwm>(dataTransferObject);
				}
	
				internal static UserSessionHistory FromViewModelObject(UserSessionHistoryVwm businessObject)
				{
					return MapTool.Mapper.Map<UserSessionHistoryVwm, UserSessionHistory>(businessObject);
			}
	
			#endregion UserSessionHistory

			#endregion ToBusiness FromBusiness Map
	}
	// ReSharper restore InconsistentNaming
}
#pragma warning restore CS0618
